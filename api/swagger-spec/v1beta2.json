{
  "swaggerVersion": "1.2",
  "apiVersion": "v1beta2",
  "basePath": "127.0.0.1:8050",
  "resourcePath": "/api/v1beta2",
  "apis": [
   {
    "path": "/api/v1beta2/watch/endpoints",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.EndpointsList",
      "method": "GET",
      "summary": "watch a list of Endpoints",
      "nickname": "watchEndpointslist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/pods/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Pod",
      "method": "GET",
      "summary": "read the specified Pod",
      "nickname": "readPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified Pod",
      "nickname": "updatePod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Pod",
      "nickname": "deletePod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/redirect/pods/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Pod",
      "nickname": "redirectPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/minions/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Minion",
      "method": "GET",
      "summary": "read the specified Node",
      "nickname": "readNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified Node",
      "nickname": "updateNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Minion",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Node",
      "nickname": "deleteNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/services/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Service",
      "method": "GET",
      "summary": "watch a particular Service",
      "nickname": "watchService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/limitRanges",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.LimitRangeList",
      "method": "GET",
      "summary": "list objects of kind LimitRange",
      "nickname": "listLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a LimitRange",
      "nickname": "createLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.LimitRange",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/limitRanges",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.LimitRangeList",
      "method": "GET",
      "summary": "watch a list of LimitRange",
      "nickname": "watchLimitRangelist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/resourceQuotas",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ResourceQuotaList",
      "method": "GET",
      "summary": "list objects of kind ResourceQuota",
      "nickname": "listResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a ResourceQuota",
      "nickname": "createResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/resourceQuotas/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ResourceQuota",
      "method": "GET",
      "summary": "watch a particular ResourceQuota",
      "nickname": "watchResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/redirect/minions/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Node",
      "nickname": "redirectNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/redirect/services/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Service",
      "nickname": "redirectService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/redirect/nodes/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "redirect GET request to Node",
      "nickname": "redirectNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/proxy/nodes/{name}/{path:*}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Node",
      "nickname": "proxyGETNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Node",
      "nickname": "proxyPUTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Node",
      "nickname": "proxyPOSTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Node",
      "nickname": "proxyDELETENode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/replicationControllers",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ReplicationControllerList",
      "method": "GET",
      "summary": "list objects of kind ReplicationController",
      "nickname": "listReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a ReplicationController",
      "nickname": "createReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.ReplicationController",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/limitRanges/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.LimitRange",
      "method": "GET",
      "summary": "read the specified LimitRange",
      "nickname": "readLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified LimitRange",
      "nickname": "updateLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.LimitRange",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a LimitRange",
      "nickname": "deleteLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/bindings",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Binding",
      "nickname": "createBinding",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Binding",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/minions/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Minion",
      "method": "GET",
      "summary": "watch a particular Node",
      "nickname": "watchNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/events",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.EventList",
      "method": "GET",
      "summary": "watch a list of Event",
      "nickname": "watchEventlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/events/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Event",
      "method": "GET",
      "summary": "read the specified Event",
      "nickname": "readEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Event",
      "nickname": "deleteEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/services",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Service",
      "method": "GET",
      "summary": "list objects of kind Service",
      "nickname": "listService",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Service",
      "nickname": "createService",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Service",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/replicationControllers/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ReplicationController",
      "method": "GET",
      "summary": "read the specified ReplicationController",
      "nickname": "readReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified ReplicationController",
      "nickname": "updateReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.ReplicationController",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a ReplicationController",
      "nickname": "deleteReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/resourceQuotas/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ResourceQuota",
      "method": "GET",
      "summary": "read the specified ResourceQuota",
      "nickname": "readResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified ResourceQuota",
      "nickname": "updateResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.ResourceQuota",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a ResourceQuota",
      "nickname": "deleteResourceQuota",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ResourceQuota",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/pods",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.PodList",
      "method": "GET",
      "summary": "list objects of kind Pod",
      "nickname": "listPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Pod",
      "nickname": "createPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Pod",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/proxy/minions/{name}/{path:*}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Node",
      "nickname": "proxyGETNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Node",
      "nickname": "proxyPUTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Node",
      "nickname": "proxyPOSTNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Node",
      "nickname": "proxyDELETENode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/endpoints",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.EndpointsList",
      "method": "GET",
      "summary": "list objects of kind Endpoints",
      "nickname": "listEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Endpoints",
      "nickname": "createEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Endpoints",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/nodes/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Minion",
      "method": "GET",
      "summary": "watch a particular Node",
      "nickname": "watchNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/replicationControllers",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ReplicationControllerList",
      "method": "GET",
      "summary": "watch a list of ReplicationController",
      "nickname": "watchReplicationControllerlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/resourceQuotas",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ResourceQuotaList",
      "method": "GET",
      "summary": "watch a list of ResourceQuota",
      "nickname": "watchResourceQuotalist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/limitRanges/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.LimitRange",
      "method": "GET",
      "summary": "watch a particular LimitRange",
      "nickname": "watchLimitRange",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the LimitRange",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/minions",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.MinionList",
      "method": "GET",
      "summary": "list objects of kind Node",
      "nickname": "listNode",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Node",
      "nickname": "createNode",
      "parameters": [
       {
        "type": "v1beta2.Minion",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/proxy/services/{name}/{path:*}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Service",
      "nickname": "proxyGETService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Service",
      "nickname": "proxyPUTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Service",
      "nickname": "proxyPOSTService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Service",
      "nickname": "proxyDELETEService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/nodes",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.MinionList",
      "method": "GET",
      "summary": "list objects of kind Node",
      "nickname": "listNode",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Node",
      "nickname": "createNode",
      "parameters": [
       {
        "type": "v1beta2.Minion",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/nodes/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Minion",
      "method": "GET",
      "summary": "read the specified Node",
      "nickname": "readNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified Node",
      "nickname": "updateNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Minion",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Node",
      "nickname": "deleteNode",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Node",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/nodes",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.MinionList",
      "method": "GET",
      "summary": "watch a list of Node",
      "nickname": "watchNodelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/replicationControllers/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.ReplicationController",
      "method": "GET",
      "summary": "watch a particular ReplicationController",
      "nickname": "watchReplicationController",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the ReplicationController",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/pods/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Pod",
      "method": "GET",
      "summary": "watch a particular Pod",
      "nickname": "watchPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/proxy/pods/{name}/{path:*}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "GET",
      "summary": "proxy GET requests to Pod",
      "nickname": "proxyGETPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "proxy PUT requests to Pod",
      "nickname": "proxyPUTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "proxy POST requests to Pod",
      "nickname": "proxyPOSTPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "proxy DELETE requests to Pod",
      "nickname": "proxyDELETEPod",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Pod",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "*/*"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/minions",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.MinionList",
      "method": "GET",
      "summary": "watch a list of Node",
      "nickname": "watchNodelist",
      "parameters": [],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/services",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Service",
      "method": "GET",
      "summary": "watch a list of Service",
      "nickname": "watchServicelist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/services/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Service",
      "method": "GET",
      "summary": "read the specified Service",
      "nickname": "readService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified Service",
      "nickname": "updateService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Service",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "DELETE",
      "summary": "delete a Service",
      "nickname": "deleteService",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Service",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/endpoints/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Endpoints",
      "method": "GET",
      "summary": "read the specified Endpoints",
      "nickname": "readEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "PUT",
      "summary": "update the specified Endpoints",
      "nickname": "updateEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Endpoints",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/pods",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.PodList",
      "method": "GET",
      "summary": "watch a list of Pod",
      "nickname": "watchPodlist",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/events",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.EventList",
      "method": "GET",
      "summary": "list objects of kind Event",
      "nickname": "listEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "void",
      "method": "POST",
      "summary": "create a Event",
      "nickname": "createEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.Event",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/events/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Event",
      "method": "GET",
      "summary": "watch a particular Event",
      "nickname": "watchEvent",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Event",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/resourceQuotaUsages",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "void",
      "method": "POST",
      "summary": "create a ResourceQuotaUsage",
      "nickname": "createResourceQuotaUsage",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1beta2.ResourceQuotaUsage",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/api/v1beta2/watch/endpoints/{name}",
    "description": "API at /api/v1beta2 version v1beta2",
    "operations": [
     {
      "type": "v1beta2.Endpoints",
      "method": "GET",
      "summary": "watch a particular Endpoints",
      "nickname": "watchEndpoints",
      "parameters": [
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the Endpoints",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": false,
        "allowMultiple": false
       }
      ],
      "produces": [
       "application/json"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   }
  ],
  "models": {
   "v1beta2.Binding": {
    "id": "v1beta2.Binding",
    "required": [
     "podID",
     "host"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "host": {
      "type": "string",
      "description": "host to which to bind the specified pod"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "podID": {
      "type": "string",
      "description": "name of the pod to bind"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.Capabilities": {
    "id": "v1beta2.Capabilities",
    "properties": {
     "add": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.CapabilityType"
       }
      ],
      "description": "added capabilities"
     },
     "drop": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.CapabilityType"
       }
      ],
      "description": "droped capabilities"
     }
    }
   },
   "v1beta2.CapabilityType": {
    "id": "v1beta2.CapabilityType",
    "properties": {}
   },
   "v1beta2.Container": {
    "id": "v1beta2.Container",
    "required": [
     "name",
     "image",
     "imagePullPolicy"
    ],
    "properties": {
     "capabilities": {
      "type": "v1beta2.Capabilities",
      "description": "capabilities for container"
     },
     "command": {
      "type": "array",
      "items": [
       {
        "$ref": "string"
       }
      ],
      "description": "command argv array; not executed within a shell; defaults to entrypoint or command in the image"
     },
     "cpu": {
      "type": "integer",
      "format": "int32",
      "description": "CPU share in thousandths of a core"
     },
     "env": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.EnvVar"
       }
      ],
      "description": "list of environment variables to set in the container"
     },
     "image": {
      "type": "string",
      "description": "Docker image name"
     },
     "imagePullPolicy": {
      "type": "v1beta2.PullPolicy",
      "description": "image pull policy; one of PullAlways, PullNever, PullIfNotPresent; defaults to PullAlways if :latest tag is specified, or PullIfNotPresent otherwise"
     },
     "lifecycle": {
      "type": "v1beta2.Lifecycle",
      "description": "actions that the management system should take in response to container lifecycle events"
     },
     "livenessProbe": {
      "type": "v1beta2.LivenessProbe",
      "description": "periodic probe of container liveness; container will be restarted if the probe fails"
     },
     "memory": {
      "type": "integer",
      "format": "int64",
      "description": "memory limit in bytes; defaults to unlimited"
     },
     "name": {
      "type": "string",
      "description": "name of the container; must be a DNS_LABEL and unique within the pod"
     },
     "ports": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Port"
       }
      ],
      "description": "list of ports to expose from the container"
     },
     "privileged": {
      "type": "boolean",
      "description": "whether or not the container is granted privileged status; defaults to false"
     },
     "resources": {
      "type": "v1beta2.ResourceRequirementSpec",
      "description": "Compute Resources required by this container"
     },
     "terminationMessagePath": {
      "type": "string",
      "description": "path at which the file to which the container's termination message will be written is mounted into the container's filesystem; message written is intended to be brief final status, such as an assertion failure message; defaults to /dev/termination-log"
     },
     "volumeMounts": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.VolumeMount"
       }
      ],
      "description": "pod volumes to mount into the container's filesystem"
     },
     "workingDir": {
      "type": "string",
      "description": "container's working directory; defaults to image's default"
     }
    }
   },
   "v1beta2.ContainerManifest": {
    "id": "v1beta2.ContainerManifest",
    "required": [
     "version",
     "id",
     "volumes",
     "containers"
    ],
    "properties": {
     "containers": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Container"
       }
      ],
      "description": "list of containers belonging to the pod"
     },
     "dnsPolicy": {
      "type": "v1beta2.DNSPolicy",
      "description": "DNS policy for containers within the pod; one of 'ClusterFirst' or 'Default'"
     },
     "id": {
      "type": "string",
      "description": "manifest name; must be a DNS_SUBDOMAIN"
     },
     "restartPolicy": {
      "type": "v1beta2.RestartPolicy",
      "description": "restart policy for all containers within the pod; one of RestartPolicyAlways, RestartPolicyOnFailure, RestartPolicyNever"
     },
     "uuid": {
      "type": "types.UID",
      "description": "manifest UUID"
     },
     "version": {
      "type": "string",
      "description": "manifest version; must be v1beta1"
     },
     "volumes": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Volume"
       }
      ],
      "description": "list of volumes that can be mounted by containers belonging to the pod"
     }
    }
   },
   "v1beta2.EmptyDir": {
    "id": "v1beta2.EmptyDir",
    "properties": {}
   },
   "v1beta2.Endpoints": {
    "id": "v1beta2.Endpoints",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "endpoints": {
      "type": "array",
      "items": [
       {
        "$ref": "string"
       }
      ],
      "description": "list of endpoints corresponding to a service, of the form address:port, such as 10.10.1.1:1909"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.EndpointsList": {
    "id": "v1beta2.EndpointsList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Endpoints"
       }
      ],
      "description": "list of service endpoint lists"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.EnvVar": {
    "id": "v1beta2.EnvVar",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name of the environment variable; must be a C_IDENTIFIER"
     },
     "value": {
      "type": "string",
      "description": "value of the environment variable; defaults to empty string"
     }
    }
   },
   "v1beta2.Event": {
    "id": "v1beta2.Event",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "host": {
      "type": "string",
      "description": "host name on which this event was generated"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "involvedObject": {
      "type": "v1beta2.ObjectReference",
      "description": "object that this event is about"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "message": {
      "type": "string",
      "description": "human-readable description of the status of this operation"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "reason": {
      "type": "string",
      "description": "short, machine understandable string that gives the reason for the transition into the object's current status"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "source": {
      "type": "string",
      "description": "component reporting this event; short machine understandable string"
     },
     "status": {
      "type": "string",
      "description": "short, machine understandable string that describes the current status of the referred object"
     },
     "timestamp": {
      "type": "string",
      "description": "time at which the client recorded the event"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.EventList": {
    "id": "v1beta2.EventList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Event"
       }
      ],
      "description": "list of events"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ExecAction": {
    "id": "v1beta2.ExecAction",
    "properties": {
     "command": {
      "type": "array",
      "items": [
       {
        "$ref": "string"
       }
      ],
      "description": "command line to execute inside the container; working directory for the command is root ('/') in the container's file system; the command is exec'd, not run inside a shell; exit status of 0 is treated as live/healthy and non-zero is unhealthy"
     }
    }
   },
   "v1beta2.GCEPersistentDisk": {
    "id": "v1beta2.GCEPersistentDisk",
    "required": [
     "pdName"
    ],
    "properties": {
     "fsType": {
      "type": "string",
      "description": "file system type to mount, such as ext4, xfs, ntfs"
     },
     "partition": {
      "type": "integer",
      "format": "int32",
      "description": "partition on the disk to mount (e.g., '1' for /dev/sda1); if omitted the plain device name (e.g., /dev/sda) will be mounted"
     },
     "pdName": {
      "type": "string",
      "description": "unique name of the PD resource in GCE"
     },
     "readOnly": {
      "type": "boolean",
      "description": "read-only if true, read-write otherwise (false or unspecified)"
     }
    }
   },
   "v1beta2.GitRepo": {
    "id": "v1beta2.GitRepo",
    "required": [
     "repository",
     "revision"
    ],
    "properties": {
     "repository": {
      "type": "string",
      "description": "repository URL"
     },
     "revision": {
      "type": "string",
      "description": "commit hash for the specified revision"
     }
    }
   },
   "v1beta2.HTTPGetAction": {
    "id": "v1beta2.HTTPGetAction",
    "properties": {
     "host": {
      "type": "string",
      "description": "hostname to connect to; defaults to pod IP"
     },
     "path": {
      "type": "string",
      "description": "path to access on the HTTP server"
     },
     "port": {
      "type": "string",
      "description": "number or name of the port to access on the container"
     }
    }
   },
   "v1beta2.Handler": {
    "id": "v1beta2.Handler",
    "properties": {
     "exec": {
      "type": "v1beta2.ExecAction",
      "description": "exec-based handler"
     },
     "httpGet": {
      "type": "v1beta2.HTTPGetAction",
      "description": "HTTP-based handler"
     },
     "tcpSocket": {
      "type": "v1beta2.TCPSocketAction",
      "description": "TCP-based handler; TCP hooks not yet supported"
     }
    }
   },
   "v1beta2.HostPath": {
    "id": "v1beta2.HostPath",
    "required": [
     "path"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "path of the directory on the host"
     }
    }
   },
   "v1beta2.Lifecycle": {
    "id": "v1beta2.Lifecycle",
    "properties": {
     "postStart": {
      "type": "v1beta2.Handler",
      "description": "called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes"
     },
     "preStop": {
      "type": "v1beta2.Handler",
      "description": "called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes"
     }
    }
   },
   "v1beta2.LimitRange": {
    "id": "v1beta2.LimitRange",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "spec": {
      "type": "v1beta2.LimitRangeSpec"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.LimitRangeItem": {
    "id": "v1beta2.LimitRangeItem",
    "properties": {
     "max": {
      "type": "v1beta2.ResourceList"
     },
     "min": {
      "type": "v1beta2.ResourceList"
     },
     "type": {
      "type": "v1beta2.LimitType"
     }
    }
   },
   "v1beta2.LimitRangeList": {
    "id": "v1beta2.LimitRangeList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.LimitRange"
       }
      ]
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.LimitRangeSpec": {
    "id": "v1beta2.LimitRangeSpec",
    "required": [
     "limits"
    ],
    "properties": {
     "limits": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.LimitRangeItem"
       }
      ]
     }
    }
   },
   "v1beta2.LivenessProbe": {
    "id": "v1beta2.LivenessProbe",
    "properties": {
     "exec": {
      "type": "v1beta2.ExecAction",
      "description": "parameters for exec-based liveness probe"
     },
     "httpGet": {
      "type": "v1beta2.HTTPGetAction",
      "description": "parameters for HTTP-based liveness probe"
     },
     "initialDelaySeconds": {
      "type": "integer",
      "format": "int64",
      "description": "number of seconds after the container has started before liveness probes are initiated"
     },
     "tcpSocket": {
      "type": "v1beta2.TCPSocketAction",
      "description": "parameters for TCP-based liveness probe"
     }
    }
   },
   "v1beta2.Minion": {
    "id": "v1beta2.Minion",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "hostIP": {
      "type": "string",
      "description": "IP address of the node"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "labels": {
      "type": "v1beta2.Minion.labels",
      "description": "map of string keys and values that can be used to organize and categorize minions; labels of a minion assigned by the scheduler must match the scheduled pod's nodeSelector"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "resources": {
      "type": "v1beta2.NodeResources",
      "description": "characterization of node resources"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "status": {
      "type": "v1beta2.NodeStatus",
      "description": "current status of node"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.Minion.labels": {
    "id": "v1beta2.Minion.labels",
    "properties": {}
   },
   "v1beta2.MinionList": {
    "id": "v1beta2.MinionList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Minion"
       }
      ],
      "description": "list of nodes"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.NodeCondition": {
    "id": "v1beta2.NodeCondition",
    "required": [
     "kind",
     "status"
    ],
    "properties": {
     "kind": {
      "type": "v1beta2.NodeConditionKind",
      "description": "kind of the condition, one of reachable, ready"
     },
     "lastTransitionTime": {
      "type": "string",
      "description": "last time the condition transit from one status to another"
     },
     "message": {
      "type": "string",
      "description": "human readable message indicating details about last transition"
     },
     "reason": {
      "type": "string",
      "description": "(brief) reason for the condition's last transition"
     },
     "status": {
      "type": "v1beta2.NodeConditionStatus",
      "description": "status of the condition, one of full, none, unknown"
     }
    }
   },
   "v1beta2.NodeResources": {
    "id": "v1beta2.NodeResources",
    "properties": {
     "capacity": {
      "type": "v1beta2.ResourceList",
      "description": "resource capacity of a node represented as a map of resource name to quantity of resource"
     }
    }
   },
   "v1beta2.NodeStatus": {
    "id": "v1beta2.NodeStatus",
    "properties": {
     "conditions": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.NodeCondition"
       }
      ],
      "description": "conditions is an array of current node conditions"
     },
     "phase": {
      "type": "v1beta2.NodePhase",
      "description": "node phase is the current lifecycle phase of the node"
     }
    }
   },
   "v1beta2.ObjectReference": {
    "id": "v1beta2.ObjectReference",
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "API version of the referent"
     },
     "fieldPath": {
      "type": "string",
      "description": "if referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]"
     },
     "kind": {
      "type": "string",
      "description": "kind of the referent"
     },
     "name": {
      "type": "string",
      "description": "id of the referent"
     },
     "namespace": {
      "type": "string",
      "description": "namespace of the referent"
     },
     "resourceVersion": {
      "type": "string",
      "description": "specific resourceVersion to which this reference is made, if any"
     },
     "uid": {
      "type": "types.UID",
      "description": "uid of the referent"
     }
    }
   },
   "v1beta2.Pod": {
    "id": "v1beta2.Pod",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "currentState": {
      "type": "v1beta2.PodState",
      "description": "current state of the pod"
     },
     "desiredState": {
      "type": "v1beta2.PodState",
      "description": "specification of the desired state of the pod"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "labels": {
      "type": "v1beta2.Pod.labels",
      "description": "map of string keys and values that can be used to organize and categorize pods; may match selectors of replication controllers and services"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "nodeSelector": {
      "type": "v1beta2.Pod.nodeSelector",
      "description": "selector which must match a node's labels for the pod to be scheduled on that node"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.Pod.labels": {
    "id": "v1beta2.Pod.labels",
    "properties": {}
   },
   "v1beta2.Pod.nodeSelector": {
    "id": "v1beta2.Pod.nodeSelector",
    "properties": {}
   },
   "v1beta2.PodList": {
    "id": "v1beta2.PodList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.Pod"
       }
      ],
      "description": "list of pods"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.PodState": {
    "id": "v1beta2.PodState",
    "properties": {
     "host": {
      "type": "string",
      "description": "host to which the pod is assigned; empty if not yet scheduled"
     },
     "hostIP": {
      "type": "string",
      "description": "IP address of the host to which the pod is assigned; empty if not yet scheduled"
     },
     "info": {
      "type": "v1beta2.PodInfo",
      "description": "map of container name to container status"
     },
     "manifest": {
      "type": "v1beta2.ContainerManifest",
      "description": "manifest of containers and volumes comprising the pod"
     },
     "message": {
      "type": "string",
      "description": "human readable message indicating details about why the pod is in this condition"
     },
     "podIP": {
      "type": "string",
      "description": "IP address allocated to the pod; routable at least within the cluster; empty if not yet allocated"
     },
     "status": {
      "type": "v1beta2.PodStatus",
      "description": "current condition of the pod, Waiting, Running, or Terminated"
     }
    }
   },
   "v1beta2.PodTemplate": {
    "id": "v1beta2.PodTemplate",
    "properties": {
     "annotations": {
      "type": "v1beta2.PodTemplate.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about pods created from the template"
     },
     "desiredState": {
      "type": "v1beta2.PodState",
      "description": "specification of the desired state of pods created from this template"
     },
     "labels": {
      "type": "v1beta2.PodTemplate.labels",
      "description": "map of string keys and values that can be used to organize and categorize the pods created from the template; must match the selector of the replication controller to which the template belongs; may match selectors of services"
     },
     "nodeSelector": {
      "type": "v1beta2.PodTemplate.nodeSelector",
      "description": "a selector which must be true for the pod to fit on a node"
     }
    }
   },
   "v1beta2.PodTemplate.annotations": {
    "id": "v1beta2.PodTemplate.annotations",
    "properties": {}
   },
   "v1beta2.PodTemplate.labels": {
    "id": "v1beta2.PodTemplate.labels",
    "properties": {}
   },
   "v1beta2.PodTemplate.nodeSelector": {
    "id": "v1beta2.PodTemplate.nodeSelector",
    "properties": {}
   },
   "v1beta2.Port": {
    "id": "v1beta2.Port",
    "required": [
     "containerPort"
    ],
    "properties": {
     "containerPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the pod's IP address"
     },
     "hostIP": {
      "type": "string",
      "description": "host IP to bind the port to"
     },
     "hostPort": {
      "type": "integer",
      "format": "int32",
      "description": "number of port to expose on the host; most containers do not need this"
     },
     "name": {
      "type": "string",
      "description": "name for the port that can be referred to by services; must be a DNS_LABEL and unique without the pod"
     },
     "protocol": {
      "type": "v1beta2.Protocol",
      "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
     }
    }
   },
   "v1beta2.ReplicationController": {
    "id": "v1beta2.ReplicationController",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "currentState": {
      "type": "v1beta2.ReplicationControllerState",
      "description": "current state of the replication controller"
     },
     "desiredState": {
      "type": "v1beta2.ReplicationControllerState",
      "description": "specification of the desired state of the replication controller"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "labels": {
      "type": "v1beta2.ReplicationController.labels",
      "description": "map of string keys and values that can be used to organize and categorize replication controllers"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ReplicationController.labels": {
    "id": "v1beta2.ReplicationController.labels",
    "properties": {}
   },
   "v1beta2.ReplicationControllerList": {
    "id": "v1beta2.ReplicationControllerList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.ReplicationController"
       }
      ],
      "description": "list of replication controllers"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ReplicationControllerState": {
    "id": "v1beta2.ReplicationControllerState",
    "required": [
     "replicas"
    ],
    "properties": {
     "podTemplate": {
      "type": "v1beta2.PodTemplate",
      "description": "template for pods to be created by this replication controller when the observed number of replicas is less than the desired number of replicas"
     },
     "replicaSelector": {
      "type": "v1beta2.ReplicationControllerState.replicaSelector",
      "description": "label keys and values that must match in order to be controlled by this replication controller"
     },
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "number of replicas (desired or observed, as appropriate)"
     }
    }
   },
   "v1beta2.ReplicationControllerState.replicaSelector": {
    "id": "v1beta2.ReplicationControllerState.replicaSelector",
    "properties": {}
   },
   "v1beta2.ResourceQuota": {
    "id": "v1beta2.ResourceQuota",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "spec": {
      "type": "v1beta2.ResourceQuotaSpec"
     },
     "status": {
      "type": "v1beta2.ResourceQuotaStatus"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ResourceQuotaList": {
    "id": "v1beta2.ResourceQuotaList",
    "required": [
     "items"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "items": {
      "type": "array",
      "items": [
       {
        "$ref": "v1beta2.ResourceQuota"
       }
      ]
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ResourceQuotaSpec": {
    "id": "v1beta2.ResourceQuotaSpec",
    "properties": {
     "hard": {
      "type": "v1beta2.ResourceList"
     }
    }
   },
   "v1beta2.ResourceQuotaStatus": {
    "id": "v1beta2.ResourceQuotaStatus",
    "properties": {
     "hard": {
      "type": "v1beta2.ResourceList"
     },
     "used": {
      "type": "v1beta2.ResourceList"
     }
    }
   },
   "v1beta2.ResourceQuotaUsage": {
    "id": "v1beta2.ResourceQuotaUsage",
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "status": {
      "type": "v1beta2.ResourceQuotaStatus"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.ResourceRequirementSpec": {
    "id": "v1beta2.ResourceRequirementSpec",
    "properties": {
     "limits": {
      "type": "v1beta2.ResourceList",
      "description": "Maximum amount of compute resources allowed"
     }
    }
   },
   "v1beta2.RestartPolicy": {
    "id": "v1beta2.RestartPolicy",
    "properties": {
     "always": {
      "type": "v1beta2.RestartPolicyAlways",
      "description": "always restart the container after termination"
     },
     "never": {
      "type": "v1beta2.RestartPolicyNever",
      "description": "never restart the container"
     },
     "onFailure": {
      "type": "v1beta2.RestartPolicyOnFailure",
      "description": "restart the container if it fails for any reason, but not if it succeeds (exit 0)"
     }
    }
   },
   "v1beta2.RestartPolicyAlways": {
    "id": "v1beta2.RestartPolicyAlways",
    "properties": {}
   },
   "v1beta2.RestartPolicyNever": {
    "id": "v1beta2.RestartPolicyNever",
    "properties": {}
   },
   "v1beta2.RestartPolicyOnFailure": {
    "id": "v1beta2.RestartPolicyOnFailure",
    "properties": {}
   },
   "v1beta2.Service": {
    "id": "v1beta2.Service",
    "required": [
     "port",
     "selector"
    ],
    "properties": {
     "annotations": {
      "type": "v1beta2.TypeMeta.annotations",
      "description": "map of string keys and values that can be used by external tooling to store and retrieve arbitrary metadata about the object"
     },
     "apiVersion": {
      "type": "string",
      "description": "version of the schema the object should have"
     },
     "containerPort": {
      "type": "string",
      "description": "number or name of the port to access on the containers belonging to pods targeted by the service"
     },
     "createExternalLoadBalancer": {
      "type": "boolean",
      "description": "set up a cloud-provider-specific load balancer on an external IP"
     },
     "creationTimestamp": {
      "type": "string",
      "description": "RFC 3339 date and time at which the object was created; recorded by the system; null for lists"
     },
     "generateName": {
      "type": "string",
      "description": "an optional prefix to use to generate a unique name; has the same validation rules as name; optional, and is applied only name if is not specified"
     },
     "id": {
      "type": "string",
      "description": "name of the object; must be a DNS_SUBDOMAIN and unique among all objects of the same kind within the same namespace; used in resource URLs"
     },
     "kind": {
      "type": "string",
      "description": "kind of object, in CamelCase"
     },
     "labels": {
      "type": "v1beta2.Service.labels",
      "description": "map of string keys and values that can be used to organize and categorize services"
     },
     "namespace": {
      "type": "string",
      "description": "namespace to which the object belongs; must be a DNS_SUBDOMAIN; 'default' by default"
     },
     "port": {
      "type": "integer",
      "format": "int32",
      "description": "port exposed by the service"
     },
     "portalIP": {
      "type": "string",
      "description": "IP address of the service; usually assigned by the system; if specified, it will be allocated to the service if unused, and creation of the service will fail otherwise; cannot be updated"
     },
     "protocol": {
      "type": "v1beta2.Protocol",
      "description": "protocol for port; must be UDP or TCP; TCP if unspecified"
     },
     "proxyPort": {
      "type": "integer",
      "format": "int32",
      "description": "if non-zero, a pre-allocated host port used for this service by the proxy on each node; assigned by the master and ignored on input"
     },
     "publicIPs": {
      "type": "array",
      "items": [
       {
        "$ref": "string"
       }
      ],
      "description": "externally visible IPs from which to select the address for the external load balancer"
     },
     "resourceVersion": {
      "type": "uint64",
      "description": "string that identifies the internal version of this object that can be used by clients to determine when objects have changed; value must be treated as opaque by clients and passed unmodified back to the server"
     },
     "selector": {
      "type": "v1beta2.Service.selector",
      "description": "label keys and values that must match in order to receive traffic for this service; if empty, all pods are selected, if not specified, endpoints must be manually specified"
     },
     "selfLink": {
      "type": "string",
      "description": "URL for the object"
     },
     "sessionAffinity": {
      "type": "v1beta2.AffinityType",
      "description": "enable client IP based session affinity; must be ClientIP or None; defaults to None"
     },
     "uid": {
      "type": "types.UID",
      "description": "UUID assigned by the system upon creation, unique across space and time"
     }
    }
   },
   "v1beta2.Service.labels": {
    "id": "v1beta2.Service.labels",
    "properties": {}
   },
   "v1beta2.Service.selector": {
    "id": "v1beta2.Service.selector",
    "properties": {}
   },
   "v1beta2.TCPSocketAction": {
    "id": "v1beta2.TCPSocketAction",
    "properties": {
     "port": {
      "type": "string",
      "description": "number of name of the port to access on the container"
     }
    }
   },
   "v1beta2.Volume": {
    "id": "v1beta2.Volume",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "volume name; must be a DNS_LABEL and unique within the pod"
     },
     "source": {
      "type": "v1beta2.VolumeSource",
      "description": "location and type of volume to mount; at most one of HostDir, EmptyDir, GCEPersistentDisk, or GitRepo; default is EmptyDir"
     }
    }
   },
   "v1beta2.VolumeMount": {
    "id": "v1beta2.VolumeMount",
    "required": [
     "name",
     "mountPath"
    ],
    "properties": {
     "mountPath": {
      "type": "string",
      "description": "path within the container at which the volume should be mounted"
     },
     "name": {
      "type": "string",
      "description": "name of the volume to mount"
     },
     "readOnly": {
      "type": "boolean",
      "description": "mounted read-only if true, read-write otherwise (false or unspecified)"
     }
    }
   },
   "v1beta2.VolumeSource": {
    "id": "v1beta2.VolumeSource",
    "required": [
     "hostDir",
     "emptyDir",
     "persistentDisk",
     "gitRepo"
    ],
    "properties": {
     "emptyDir": {
      "type": "v1beta2.EmptyDir",
      "description": "temporary directory that shares a pod's lifetime"
     },
     "gitRepo": {
      "type": "v1beta2.GitRepo",
      "description": "git repository at a particular revision"
     },
     "hostDir": {
      "type": "v1beta2.HostPath",
      "description": "pre-existing host file or directory; generally for privileged system daemons or other agents tied to the host"
     },
     "persistentDisk": {
      "type": "v1beta2.GCEPersistentDisk",
      "description": "GCE disk resource attached to the host machine on demand"
     }
    }
   }
  }
 }